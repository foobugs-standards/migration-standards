#!/usr/bin/env php
<?php

/**
 * @todo add file headers
 * @todo clean up
 * @todo might use two-step version (1) selects standard (may create tmp. ruleset) (2) executes or says how to, if not able to
 */
 
// get from/ with arguments
$options = getopt('l::h::', array('from:', 'with:'));
$availableTargets = array(52, 53, 54, 55);
$available = array_flip($availableTargets);

if (!isset($options['l'])) {
    if (isset($options['h']) || !isset($options['from']) || !isset($options['with'])) {
        echo 'USAGE: compat --from=52 --with=53' . PHP_EOL;
        echo 'AVAILABLE VERSIONS: compat -l' . PHP_EOL; 
        echo PHP_EOL;
        exit(1);
    }
    $from = (int) $options['from'];
    $with = (int) $options['with'];
}

// list available versions if requested or range exceeded
if (isset($options['l']) || !isset($available[$from]) || !isset($available[$with])) {
    echo 'Compatibility tests available for' . PHP_EOL;
    echo '* ' . implode(PHP_EOL . '* ', $availableTargets) . PHP_EOL;
    echo PHP_EOL;
    exit(0);
}

// swap as needed
if ($with < $from) {
    $with = $with ^ $from;
    $from = $with ^ $from;
    $with = $with ^ $from;
}

$standard = "PHP{$from}to{$with}";
// if diff is more than one minor version create a temporary ruleset and use that
if ($available[$with]-$available[$from] > 1) {
    // create temporary standard
    $standard = sys_get_temp_dir() . '/' . $standard . uniqid() . '.xml';
    $ruleset = '<?xml version="1.0"?>' . PHP_EOL;
    $ruleset .= sprintf('<ruleset name="Compat standard %d-%d">' . PHP_EOL, $from, $with);
    // add refs
    foreach ($availableTargets as $k => $v) {
        if ($v==$from && $v<$with) {
            $from = $availableTargets[$k+1];
            $ruleset .= sprintf('<rule ref="php%dto%d"/>' . PHP_EOL, $v, $from);
        }
    }
    $ruleset .= '</ruleset>';
    file_put_contents($standard, $ruleset);
}

// patch ARGV and ARGC
foreach ($_SERVER['argv'] as $k => $v) {
    if ($v == '--from' || $v == '--with') {
        unset($_SERVER['argv'][$k], $_SERVER['argv'][$k+1]);
    }
}
$_SERVER['argv'][] = '--standard=' . $standard;
$_SERVER['argv'] = array_values($_SERVER['argv']);
$_SERVER['argc'] = count($_SERVER['argv']);

// select phpcs binary (same dir, local vendor dir, system default)
// get path this script was called at
$phpcs = dirname($_SERVER['PHP_SELF']) . DIRECTORY_SEPARATOR . 'phpcs';
if (substr($_SERVER['PHP_SELF'], 0, 1) !== DIRECTORY_SEPARATOR) {
    $phpcs = $_SERVER['PWD'] . DIRECTORY_SEPARATOR . $phpcs;
}
if (!file_exists($phpcs)) {
    $phpcs = __DIR__ . '/../vendor/bin/phpcs';
    if (!file_exists($phpcs)) {
        // *nix only
        $phpcs = trim(`which phpcs 2>/dev/null`);
    }
}

// filter hashbang from output
$ghCompatBuffer = false;
ob_start(function($string) use($ghCompatBuffer) { if ($ghCompatBuffer) return false; $ghCompatBuffer = true; return preg_replace('`^\#\![^\n]+php\s*`us', '', $string); });

// let phpcs handle anything else
require $phpcs;
